{"version":3,"file":"rvt-form-field.directive.d.ts","sources":["rvt-form-field.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, OnDestroy, Renderer2 } from '@angular/core';\nimport { MatFormField } from '@angular/material/form-field';\nexport declare class RivetFormFieldDirective implements AfterContentInit, OnDestroy {\n    private matFormField;\n    private renderer;\n    private unsubscribe;\n    private readonly formControlInvalid;\n    private readonly standardClass;\n    private readonly errorClass;\n    private nativeElement;\n    private messageDisplayState;\n    constructor(matFormField: MatFormField, renderer: Renderer2);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Per UX specifications we want to deviate from Material Behaviors for Rvt Inputs. The following conditions\n     * are required as of 3/19/2020\n     *\n     * Inputs should not show errors or have error formatting before they are focused.\n     * When an input is focused if there are errors, show error formatting and error text.\n     * If the input is invalid keep showing the error after the user has left the field.\n     * When the input is focused and there are no errors, display a hint.\n     * When the input is valid but is not focused hints should be hidden.\n     *\n     * This can be accomplished by using a combination of touched and focused states. If untouched don't show anything.\n     * If focused show errors or hints respectively.\n     * If the input has been touched show errors.\n     *\n     * If we need to show errors when the user has tried to submit, use the markAllAsTouched on the FormGroup / FormControl\n     * to display all errors on the page. https://angular.io/api/forms/FormControl\n     */\n    private determineDisplayState;\n}\n"]}